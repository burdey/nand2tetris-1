// This file is part of www.nand2tetris.org
// and the book The Elements of Computing Systems
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
      And(a=instruction[15], b=instruction[3], out=writeM);
      Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);
      Not(in=instruction[15], out=storeA);
      Or(a=instruction[5], b=storeA, out=Aload);
      ARegister(in=outMux1, load=Aload, out=outA, out[0..14]=addressM, out=pcA);
      Mux16(a=outA, b=inM, sel=instruction[12], out=outMux2);

      And(a=instruction[2], b=instruction[2], out=j1);
      Not(in=j1, out=notj1);
      And(a=instruction[1], b=instruction[1], out=j2);
      Not(in=j2, out=notj2);
      And(a=instruction[0], b=instruction[0], out=j3);
      Not(in=j3, out=notj3);

      And3(a=notj1, b=notj2, c=notj3, out=NoJump);
      And3(a=notj1, b=notj2, c=j3, out=JGT);
      And3(a=notj1, b=j2, c=notj3, out=JEQ);
      And3(a=notj1, b=j2, c=j3, out=JGE);
      And3(a=j1, b=notj2, c=notj3, out=JLT);
      And3(a=j1, b=notj2, c=j3, out=JNE);
      And3(a=j1, b=j2, c=notj3, out=JLE);
      And3(a=j1, b=j2, c=j3, out=JMP);

      Not(in=ng, out=notNg);
      Not(in=zr, out=notZr);
      And(a=notNg, b=notZr, out=pg);
      Or(a=pg, b=zr, out=pgZr);
      Or(a=ng, b=zr, out=ngZr);

      Not(in=NoJump, out=NotNoJump);

      And(a=JGT, b=pg, out=Jump1);
      And(a=JEQ, b=zr, out=Jump2);
      And(a=JGE, b=pgZr, out=Jump3);
      And(a=JLT, b=ng, out=Jump4);
      And(a=JNE, b=notZr, out=Jump5);
      And(a=JLE, b=ngZr, out=Jump6);

      Or8Way(in[0]=false,
      in[1]=Jump1,
      in[2]=Jump2,
      in[3]=Jump3,
      in[4]=Jump4,
      in[5]=Jump5,
      in[6]=Jump6,
      in[7]=JMP, out=Jump);

      And(a=Jump, b=NotNoJump, out=DoJump);

      And(a=DoJump, b=instruction[15], out=loadJump);
      Not(in=instruction[15], out=OrderA);
      Not(in=loadJump, out=NotloadJump);
      Or(a=OrderA, b=NotloadJump, out=inc);
      PC(in=pcA, reset=reset, load=loadJump, inc=inc, out[0..14]=pc);
      ALU(x=outD, y=outMux2, zx=instruction[11], nx=instruction[10],
          zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
          zr=zr, ng=ng,
          out=outALU,
          out[15]=outALU15,
          out=outM);
      Not(in=storeA, out=notStoreA);
      And(a=notStoreA, b=instruction[4], out=storeD);
      DRegister(in=outALU, load=storeD, out=outD);

}
